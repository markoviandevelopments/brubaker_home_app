name: Build iOS

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    runs-on: macos-latest

    env:
      KEYCHAIN_PATH: build.keychain-db
      KEYCHAIN_PASSWORD: Pre$ton01
      P12_PASSWORD: Not$erp01

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'

      - name: Install dependencies
        run: flutter pub get

      - name: Analyze Dart code
        run: flutter analyze

      - name: Set up keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychains -d user -s $KEYCHAIN_PATH

      - name: Download certificate
        run: echo "TUlJTWp3SUJBekNDREVVR0NTcUdTSWIzRFFFSEFhQ0NERFlFZ2d3eU1JSU1MakNDQnFJR0NTcUdTSWIzRFFFSEJxQ0NCcE13Z2dhUEFnRUFNSUlHaUFZSktvWklodmNOQVFjQk1GY0dDU3FHU0liM0RRRUZEVEJLTUNrR0NTcUdTSWIzRFFFRkREQWNCQWppSU5Sc2huamw3UUlDQ0FBd0RBWUlLb1pJaHZjTkFna0ZBREFkQmdsZ2hrZ0JaUU1FQVNvRUVOZjFoaWJMVHo2bEtpN1lqVDA0bFZDQWdnWWdSQmJuRm5IYWk4ZzBMTjlKRkNXMElNa1dwZWptZTIvcGZTS001QTladDI1R3RFQTJXM0x3bFBKUzJPeXFvY1ZjdkhIejJhTThydHp0QzhIZHUxbGpmcXhqR0hiTlN2M1BadHVYMkloRHJTRFpBSE9UaEZIM2tueUFQcENyUnRPOHFzMnBSQkY2K2RjRis4OEx0OHlqN1piaUZRUCt1ZkY2ZGlCV1B1ZDBBL1ExMTBTQUdSODRlK1F1b2tqRkFyS3JHWjFhQVVqNG1vMmZabXRVTElGdG5vb0dFQmNGOU5XWnNrd25kalEyekJGZWhBNmFWVDRHZ1VaMkJVb25IL2hQUlR1eW9HSjlreVQ5K1VOM0RqSFNiUFNsYVBmWm9XQkxkZE9UejlaaDE0bnc2RWRqUXZFQ1BuRjJJQ0V1U0ZTdVkxS3BLMm1JVWZHanpGRVZJbDY1SmE2ZzhmRWVieTdxNTcwcWI5VXhkQkhWQzRTMHA4cDVZL01SM1NXSmFoa1BJQXdYc0lhcm4vbzFjMStZaGZKaTNteDhRRGw3ZzNPNnpCT0cvK0xieFcyOGpJNmNkRjlzRzY5eE1NQlZwTFB2WmhzalNnNjJ6NzI2RTdzZXBnYnR2alJqRjJhK2NmOFh1a3BHRHZ0RGE1bDNFSXZpUU1rZ3diYkVyVE5nVGVEQ2E1RU5Sc1EwWkFFWTRDbHFLYWNEM0dsUVJXRmNQd2NqYkM4K3gyRXJjNW9SK29NSUVDYjBaTUhtSFRrSzl0QlNrdkpiQWFvb1owMnZxOFg4RDBXbGRvVytNSmtQYlFMVWZJbHJFdzh6UHBLam9rV1RKYWVHWmcxN3dKU3diUThTRzVtVThteWY3NTEwcnJwdXU5NFJPTEIxQXN0ZnZ2azZUZTBDcVpyQ2dBTjFSVmY1aU9DclA2bkRLRi9PSEpCdHgrOVRPdmIwUlQ5OTVLZWlPSDYzV0dZKzk0QktjbllBdmRqN2Erd0cvcjN2b04ySVZlSjg5WlVIWE1JTSt0b1lnWkV3bnFEQ3FNeHh6ZEhuakFMV0pJaXNzZE9QTGdtZDIyVm96aUFMUFg5RXFkb3ZrT2hoOE1XV1pNVEREV01Qc2E4WWs4ZzlQWVZDMmVpencvVmZwa0ZlNFF5dEZ1Qk5TaWV4ZStvYkJsNnQ1YlJ2c1NJWVIxNHh6L29Ed2xRaUh1UWVjSkhGZVpNRlQ3SmFES3FsbTFWVGtjb05BaDZ5MzhTYVhkQ1VCZlpxOTQwVi9WVVpDWG1BUU0vOVlHUHhHSDV5YnJQNzY0QXJiQUJGUTBoZ2VSaDhjRVJ1K1VCc2tNSlVkeVRwbjdTWkhBM3dyMnVENCtTZE9mcW50VU5iMDB4bVdsNU9Eb0xBaDh4K2IyQXRxNFJNWXJaeEYxUUMwMHQvQU9RTzQ4WmFGei9OQzRzUkIzV2w0eXhodEdEQVcyaWN4NDZxcWpJZEJ6bmV4MGNrNUUvUmVXZk5BRXVjcDRiR3BGa2wybG93NkZ6TCtPZlFuYisyeTRTczBhM2x6VE5yM29pdXJmN1VBOXVBRVRwd3NiaEdwR3NvWlNLdkdyUzlqLzg0QThSNFdKcjU4WStoM2lIN05vZUt1VUpMRGpLQVlMbjM2SmhJTVhlRGhBTEQzMDMyVk9nSHgxSVlmSjd2VHlDQ1ozc0ZnSWtIVXhnaGo3T0RaRy93WlJlMDdzVUxOWTNWclYybG50Q3Q3SzZJaWhZYjlKeUIzRTRRMGcyUVA2WGlheDl1OUFPUVYrVThua3F3TjEwWDJobWpGcGRya0VhK21GVk5Vc2wvaDAxdm9WOW5ldFhucFBnQVRTUGtBdzlqOXhuTFN5bks3VG0vWnM4MmE1d2tQS3JGUUc3ZTRrbWVOSDVDcFJuNWRBaElFZEFKY1d2bCs1TERiN2Z1cWI0QWIxaGhVN2RVeGVqWjJQT0JpOG5IQ1pjdlVHcVovdlcvc25QdGo0ZUZRcVM0ZVR3Mi9zakFXKzZMZ3RWMU40eHlRdFAxbEUvMURYTDk1OExHMXIzbS9QaTVNNk40MDVKYmIzOVVNcnBJalU0SUpUREFhdGcva21JaEkzOW1pclhDSHZDZTVxajhTbjhMK25RcnZNNStQcGoya2dNTENaVXRud0VIYmFEbnlDQTl6MHNZTGsyZUM1WjBBdUZDTzFBSjdEUlhoZmtRWHZCdTBQWjN0QmNMVkI4Q0loQTJLOXMzWGVtUmh6RmFLSDkxbjdpRWttaU42MzhZODRHNzhDZlpnNmFNTzFJQVFwR3FHOXVybWt3YVVrTlE1dndvYlZ6NTFtb3VuSkR1N2lLczBRVWcxblFFVHl0dHpJK1M2MHMvYUdQNHpjb3RFSFo1em9zR293Tm5aQ0p6NjBueVNucnFBanVvcHJWdUVlNnp2YjQzTFlieEdVb3Q0elpGL0RPQldYZzRLT2d6cHFWSEErV0lMbDVQRGZhTXQ3QzZkbi9kVktiSldkWVJLUUFRV1BpY05CbUE1Tlpyc0ZlbzdDVkliWU1hRi9XN21qQ090ZGhDdFBVU0dDMEUreGlEellBWi9IRmlHdW8yYVM2NlpsTHMybUFkS2cxbjN5em8xcGhMRFpPQXpGT3R0N3RBMGExekRXcVVjQm50ZjlxSEtiMVJaaWswVHRNcXlHNVhkNkdaUXI5T3Exb3lxSkU0ZDY1c21VcjlzeGJqNzJBd1hJWlhoTTRtLzNZelFpOUNUbWJuaGNXemJIblJJcVZDOFgweGdsQnFiaWo1Qk9uSzJMT1orbk13Z2dXRUJna3Foa2lHOXcwQkJ3R2dnZ1YxQklJRmNUQ0NCVzB3Z2dWcEJnc3Foa2lHOXcwQkRBb0JBcUNDQlRFd2dnVXRNRmNHQ1NxR1NJYjNEUUVGRFRCS01Da0dDU3FHU0liM0RRRUZEREFjQkFndzhOdWpDZzNKQlFJQ0NBQXdEQVlJS29aSWh2Y05BZ2tGQURBZEJnbGdoa2dCWlFNRUFTb0VFQW5VSm0wM3hrME5CTTYraFN6TU11b0VnZ1RRY3A2NjM3QzZyaVF6ZUVQaGdyc3U3VStZTWxYQTJFVFJ1aU1TMTlIZDRBTU1oOTdpQXVRbkpUVC8vampmTkd5ZVROYno5UE9UT3VmaHQvQSs5NWY2UWNsUDdRY2tBdFhodlFXYjNpQW9Yb3BwU2ZxaFh4MGwrTElCTFZiZXJsNXBsUlpLdTIzd0J0UnpRVWZ3RzJWb3piU2pIdGMxbXVmWkxUaElIaWpUR2wwaVZzVnhwcVdiVENnamZUUWI0VGtYUk9EZkgrYnBOenpNay9oM3F0SnBVTDkyQUV5ZXVoYzB2aUE3MzZnWVh3YzhnUlB1V1RlN1JwczdSSWJFMjhrUXFEWmNUazc4eURDd2REdlp6ckZ5S0NaYTE5YkkrZi9Ddkk1K3pqQWh4TWt4RG1Dd3JlYnZ5RHF6dFhNcHpzcXcvTWpUeTY1SXFCRVJYdThxNzl6UFUxZlNCNWphOUhQUHZxWmRJN2k1bGk1dDNGOWNJUWhVK1FLTEU3QjlHSVJQUVZjdXhkSGhUeGpHN3JtY2t1L1FiQXVQcG14Wlo1YzQ1ckJMU05ubnVTRUt2SGFBT3o2WjVxR2JNZEJmclNpMGFsSU1JMmJDK0NMVS9tWS9RbFhyTmUyYlNNTlJPeTlHNXlDNWEzUmsrWWJZejc4K1NXb05kZnhmKzlXYTV0SGlrcThHOVpnRDhtMmhlT1hRdnhWVWYvSUtjMXg0TEUrZThxdjZZa3Mxc05aazRPUXFoUlRuRlB1aEd1Qzg4VWJWeXc1ZVdJWHZXTTNuYlpHTVFaOFR0RjZjQU1laUhkMnJja0pFKzZHRkNhODB6NGVTc3ZzTkduN3Nac1h2Nm1naHVUcFVFY0JYZFRscXZlaEJidVdmZEZzelNOeUNhbXNJSFVPNTI3MThLSWpjalNrajFFTGxxZkRaa3NaSVJaaUFyMTRhYTYxTnhUOGIzUGY5RW4xM2tPUzJoZEV1RkFnejNXT1RlOUhocDkyOUNGTkhtQWF5UUxTdmMxNk9xMWxzcnJ5dE9VYnB1eHFLM1RIZkhVcjlTV29MK2RheHpWN05yejVwV2U1RVFYNmVkUmdiWC8vdUZhZkZjaW1RRTRaQlo2SnNSZHZCM1hnTUZzaGRtdlJBS1RRY1F2dUY2b1IvcE9sV0pSbEdsTGtLb1ZRajBuNTFDMUhIVVl3Y2dOcUZqUHdGYW9EVHdvMnFrR0h5d0JXQzlMRElMQWpIQ2IyTnBFendCV3VNREErcnhSRDJ6VGcxUjUza3AzZ2tkMlBrQy9YQXZtNXF3cVF0YkRBTXNjYnVKMU8ya0ZZdjRVcE05WVhLZUE5K1l4V1RCd0ZQWklSRHhreXdWKzNKbkxYSTNBcW9YTEJ2RjhsUVIwbzYzNlhac0FIWlJ5a2Fac25aM3lIbXlaY0E0VThpSzNZd3AxYlF3SEZadW5rLzE3KzhwdmxsVnNJSXd5cjc1M1NZZkZRTG5KMTNKblVPa3puYmpNZDNwSHAxNXlVdHNpZHJFYVRHdDhrUHpKUVZHbFhqbGo1czRNTmxENGRrejNhOGVqUEgyaTRwcy96Mzl0U3hTQjdrMW1BTjFYUkFXVGtjejlQdUU5dFpuQ1dJN25tTDl4b3pNMXk3Sm1uSDFaQWVXTitGTHVQdE1UT0F0MDhkbVVrS2ZRQUEvakVXcmdIYjJyUjNnajdlb2dDTy9yZ1FWVmgxR0E5Qk43enppYzNCNGtISzRpdHVLUyt0WlRUcFEzdzNYYXNMTjY3eC9YMXdjalhmTjBpdnJ2UVNLQ2o1QWNOb3hURDVzbnEwOG1NRjhMRFNzVlhkSVNObVpYYjJIa2tiMUI3UnVnMCtxUjRqVVJpSEttd0gyOTZ5dWhmRWl1RUhWRVF1OFRkc0Vlb0ZlRk12Y1pyakdkbWRLa3RLWllaOXpvQVhRcmJ5WEhPTC9oSVlqWjZtZEs5bGFiZzE3N0lndUdtQTVvSmZ1QStSc1B0RDVVczg0T2tQcFl6eWEyR0hQajUyc2gwU0NRaEgzYzlzalRkYldoWjh4QUQ5RXBLZHpKS3pJTUIwOGZ6TnlaYzVLdHN4c0Fyd1M2bmF2dy9tQTJ3dkpzWHRXWHVQaXRrTWZFWGpOREMvZXNhUm1vRkg5d2JjdmlSRnBHZHlDRmovSkpSNEt2S293ckxDU1BFMWhhU0xFUE14SlRBakJna3Foa2lHOXcwQkNSVXhGZ1FVSExkb2syNW9yRE45MWo4bzQ5SE9xMHVQdlQ0d1FUQXhNQTBHQ1dDR1NBRmxBd1FDQVFVQUJDRGtuNlc3ZjdOV3dpK1kzZXFock5IVkxocHBmVzM1Z3A5Vittd3JGM0tDZHdRSUJGRHRCbTlUbUlNQ0FnZ0E=" | base64 --decode > /tmp/apple_cert.p12  # Replace CERT_BASE64_PLACEHOLDER with your base64 string

      - name: Check decoded certificate file
        run: |
          ls -l /tmp/apple_cert.p12
          file /tmp/apple_cert.p12 || echo "File type check failed - may not be a valid PKCS12 file"

      - name: Import certificate
        run: security import /tmp/apple_cert.p12 -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
        continue-on-error: false 

      - name: Verify signing identities
        run: security find-identity -v -p codesigning $KEYCHAIN_PATH

      - name: Download provisioning profile
        run: echo "" | base64 --decode > /tmp/app.mobileprovision  # Replace PROFILE_BASE64_PLACEHOLDER with your base64 string

      - name: Check decoded provisioning profile
        run: |
          ls -l /tmp/app.mobileprovision
          file /tmp/app.mobileprovision || echo "File type check failed - may not be a valid mobileprovision file"

      - name: Extract provisioning profile details
        run: |
          security cms -D -i /tmp/app.mobileprovision > /tmp/decoded.plist
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /tmp/decoded.plist)
          PROFILE_SPECIFIER=$(/usr/libexec/PlistBuddy -c "Print :Name" /tmp/decoded.plist)
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_SPECIFIER=$PROFILE_SPECIFIER" >> $GITHUB_ENV
          echo "Extracted PROFILE_UUID: $PROFILE_UUID"
          echo "Extracted PROFILE_SPECIFIER: $PROFILE_SPECIFIER"

      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${{ env.PROFILE_UUID }}.mobileprovision

      - name: Extract bundle ID
        run: |
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" ios/Runner/Info.plist)
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "Extracted BUNDLE_ID: $BUNDLE_ID"

      - name: Set hardcoded Team ID
        run: |
          echo "TEAM_ID=D296S46TFC" >> $GITHUB_ENV
          echo "Hardcoded TEAM_ID: $TEAM_ID"

      - name: Update Xcode project for manual signing
        run: |
          PROJECT_PATH="ios/Runner.xcodeproj/project.pbxproj"
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' $PROJECT_PATH
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ env.TEAM_ID }}";/g' $PROJECT_PATH
          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "${{ env.PROFILE_SPECIFIER }}";/g' $PROJECT_PATH
          sed -i '' 's/CODE_SIGN_IDENTITY = "";/CODE_SIGN_IDENTITY = "Apple Distribution";/g' $PROJECT_PATH
          sed -i '' 's/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = "";/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = "Apple Distribution";/g' $PROJECT_PATH

      - name: Create export options plist
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > exportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> exportOptions.plist
          echo '<plist version="1.0">' >> exportOptions.plist
          echo '<dict>' >> exportOptions.plist
          echo '  <key>compileBitcode</key>' >> exportOptions.plist
          echo '  <false/>' >> exportOptions.plist
          echo '  <key>method</key>' >> exportOptions.plist
          echo '  <string>app-store</string>' >> exportOptions.plist
          echo '  <key>teamID</key>' >> exportOptions.plist
          echo "  <string>${{ env.TEAM_ID }}</string>" >> exportOptions.plist
          echo '  <key>provisioningProfiles</key>' >> exportOptions.plist
          echo '  <dict>' >> exportOptions.plist
          echo "    <key>${{ env.BUNDLE_ID }}</key>" >> exportOptions.plist
          echo "    <string>${{ env.PROFILE_SPECIFIER }}</string>" >> exportOptions.plist
          echo '  </dict>' >> exportOptions.plist
          echo '</dict>' >> exportOptions.plist
          echo '</plist>' >> exportOptions.plist
          cat exportOptions.plist  # Print for debugging

      - name: Remove FinderInfo xattr
        run: sudo xattr -r -d com.apple.FinderInfo . || true

      - name: Install xcodeproj gem
        run: sudo gem install xcodeproj

      - name: Add Release build configuration
        run: |
          ruby <<EOF
          require 'xcodeproj'

          def add_release_config(project)
            if project.build_configuration_list.build_configurations.none? { |bc| bc.name == 'Release' }
              base_name = project.build_configuration_list.build_configurations.find { |bc| bc.name == 'Profile' } ? 'Profile' : 'Debug'
              base_config = project.build_configuration_list[base_name]
              new_config = project.add_build_configuration('Release', :release)
              new_config.build_settings.merge!(base_config.build_settings)
            end

            project.targets.each do |target|
              if target.build_configuration_list.build_configurations.none? { |bc| bc.name == 'Release' }
                base_name = target.build_configuration_list.build_configurations.find { |bc| bc.name == 'Profile' } ? 'Profile' : 'Debug'
                base_config = target.build_configuration_list[base_name]
                new_config = target.add_build_configuration('Release', :release)
                new_config.build_settings.merge!(base_config.build_settings)
              end
            end
          end

          # Main project
          proj_path = 'ios/Runner.xcodeproj'
          project = Xcodeproj::Project.open(proj_path)
          add_release_config(project)
          project.save

          # Pods project (if exists)
          pods_proj_path = 'ios/Pods/Pods.xcodeproj'
          if File.exist?(pods_proj_path)
            pods_project = Xcodeproj::Project.open(pods_proj_path)
            add_release_config(pods_project)
            pods_project.save
          end
          EOF

      - name: Build IPA
        run: flutter build ipa --release --export-options-plist=exportOptions.plist -v

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: build/ios/ipa/*.ipa
          retention-days: 5  # Adjust as needed
