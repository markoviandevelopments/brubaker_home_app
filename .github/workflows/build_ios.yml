name: Build iOS
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: macos-14
    env:
      KEYCHAIN_PATH: build.keychain-db
      KEYCHAIN_PASSWORD: Not$erp01
      P12_PASSWORD: Not$erp01
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          channel: 'stable'
      - name: Install dependencies
        run: flutter pub get
      - name: Analyze Dart code
        run: flutter analyze
      - name: Set up keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security default-keychain -s $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychains -d user -s $KEYCHAIN_PATH
      - name: Copy certificate
        run: cp certs/apple_cert.p12 /tmp/apple_cert.p12  # Assumes apple_cert.p12 is uploaded/committed to the 'certs/' directory in the repo
      - name: Check decoded certificate file
        run: |
          ls -l /tmp/apple_cert.p12
          file /tmp/apple_cert.p12 || echo "File type check failed - may not be a valid PKCS12 file"
          openssl pkcs12 -info -in /tmp/apple_cert.p12 -passin pass:"$P12_PASSWORD" -nokeys || echo "OpenSSL verification failed"
      - name: Import certificate
        run: security import /tmp/apple_cert.p12 -P "$P12_PASSWORD" -A -t priv -f pkcs12 -k $KEYCHAIN_PATH
        continue-on-error: false
      - name: Allow codesign access
        run: security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
      - name: Verify signing identities
        run: |
          security find-identity -v -p codesigning $KEYCHAIN_PATH
          security find-certificate -c "iPhone Distribution" -p $KEYCHAIN_PATH
      - name: Copy provisioning profile
        run: cp certs/app.mobileprovision /tmp/app.mobileprovision  # Assumes app.mobileprovision is uploaded/committed to the 'certs/' directory in the repo
      - name: Check decoded provisioning profile
        run: |
          ls -l /tmp/app.mobileprovision
          file /tmp/app.mobileprovision || echo "File type check failed - may not be a valid mobileprovision file"
      - name: Extract provisioning profile details
        run: |
          security cms -D -i /tmp/app.mobileprovision > /tmp/decoded.plist
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /tmp/decoded.plist)
          PROFILE_SPECIFIER=$(/usr/libexec/PlistBuddy -c "Print :Name" /tmp/decoded.plist)
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV
          echo "PROFILE_SPECIFIER=$PROFILE_SPECIFIER" >> $GITHUB_ENV
          echo "Extracted PROFILE_UUID: $PROFILE_UUID"
          echo "Extracted PROFILE_SPECIFIER: $PROFILE_SPECIFIER"
      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${{ env.PROFILE_UUID }}.mobileprovision
      - name: Extract bundle ID
        run: |
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" ios/Runner/Info.plist)
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV
          echo "Extracted BUNDLE_ID: $BUNDLE_ID"
      - name: Set hardcoded Team ID
        run: |
          echo "TEAM_ID=D296S46TFC" >> $GITHUB_ENV
          echo "Hardcoded TEAM_ID: $TEAM_ID"
      - name: Update Xcode project for manual signing
        run: |
          PROJECT_PATH="ios/Runner.xcodeproj/project.pbxproj"
          sed -i '' 's/CODE_SIGN_STYLE = Automatic;/CODE_SIGN_STYLE = Manual;/g' $PROJECT_PATH
          sed -i '' 's/DEVELOPMENT_TEAM = "";/DEVELOPMENT_TEAM = "${{ env.TEAM_ID }}";/g' $PROJECT_PATH
          sed -i '' 's/PROVISIONING_PROFILE_SPECIFIER = "";/PROVISIONING_PROFILE_SPECIFIER = "${{ env.PROFILE_SPECIFIER }}";/g' $PROJECT_PATH
          sed -i '' 's/CODE_SIGN_IDENTITY = "";/CODE_SIGN_IDENTITY = "iPhone Distribution";/g' $PROJECT_PATH
          sed -i '' 's/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = "";/CODE_SIGN_IDENTITY\[sdk=iphoneos\*\] = "iPhone Distribution";/g' $PROJECT_PATH
      - name: Create export options plist
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > exportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> exportOptions.plist
          echo '<plist version="1.0">' >> exportOptions.plist
          echo '<dict>' >> exportOptions.plist
          echo ' <key>compileBitcode</key>' >> exportOptions.plist
          echo ' <false/>' >> exportOptions.plist
          echo ' <key>method</key>' >> exportOptions.plist
          echo ' <string>app-store</string>' >> exportOptions.plist
          echo ' <key>teamID</key>' >> exportOptions.plist
          echo " <string>${{ env.TEAM_ID }}</string>" >> exportOptions.plist
          echo ' <key>provisioningProfiles</key>' >> exportOptions.plist
          echo ' <dict>' >> exportOptions.plist
          echo " <key>${{ env.BUNDLE_ID }}</key>" >> exportOptions.plist
          echo " <string>${{ env.PROFILE_SPECIFIER }}</string>" >> exportOptions.plist
          echo ' </dict>' >> exportOptions.plist
          echo '</dict>' >> exportOptions.plist
          echo '</plist>' >> exportOptions.plist
          cat exportOptions.plist
      - name: Remove FinderInfo xattr
        run: sudo xattr -r -d com.apple.FinderInfo . || true
      - name: Build IPA
        run: flutter build ipa --release --export-options-plist=exportOptions.plist -v
      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4
        with:
          name: ios-app
          path: build/ios/ipa/*.ipa
          retention-days: 5
