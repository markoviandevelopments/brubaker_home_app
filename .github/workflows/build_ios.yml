name: Build iOS
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
jobs:
  build:
    runs-on: macos-14  # Specifies the macOS runner version for iOS builds.
    timeout-minutes: 45  # Prevents infinite hangs, fails job after 45 minutes.
    env:
      KEYCHAIN_PATH: build.keychain-db  # Custom keychain file path to isolate certificates.
      KEYCHAIN_PASSWORD: Not$erp01  # Password for the custom keychain (hardcoded for simplicity; consider secrets for production).
      P12_PASSWORD: Not$erp01  # Password for the .p12 certificate file (same note as above).
      CERT_LABEL: "iPhone Distribution: Willoh Brubaker (D296S46TFC)"  # The exact common name (label) of the certificate for verification.
    steps:
      - name: Checkout code
        uses: actions/checkout@v4  # Checks out the repository code to the runner.

      - name: Set up Flutter
        uses: subosito/flutter-action@v2  # Installs Flutter on the runner.
        with:
          channel: 'stable'  # Uses the stable channel for reliability.

      - name: Install dependencies
        run: flutter pub get  # Fetches Flutter dependencies.

      - name: Clean Flutter build
        run: flutter clean
      - name: Install CocoaPods
        run: cd ios && pod install --repo-update && cd ..

      - name: Analyze Dart code
        run: flutter analyze  # Runs static analysis on the Dart code to catch issues early.

      - name: Install xcodeproj gem
        run: gem install xcodeproj  # Installs Ruby gem to manipulate Xcode project.

      - name: Copy certificate
        run: cp certs/apple_cert.p12 /tmp/apple_cert.p12  # Copies the .p12 file from repo to temp location.

      - name: Check decoded certificate file
        run: |
          ls -l /tmp/apple_cert.p12  # Lists file details for verification.
          file /tmp/apple_cert.p12 || echo "File type check failed - may not be a valid PKCS12 file"  # Checks file type.
          openssl pkcs12 -info -in /tmp/apple_cert.p12 -passin pass:"$P12_PASSWORD" -nokeys || echo "OpenSSL verification failed"  # Verifies .p12 structure with OpenSSL.
      - name: Copy provisioning profile
        run: cp certs/app.mobileprovision /tmp/app.mobileprovision  # Copies the provisioning profile from repo to temp.

      - name: Check decoded provisioning profile
        run: |
          ls -l /tmp/app.mobileprovision  # Lists file details.
          file /tmp/app.mobileprovision || echo "File type check failed - may not be a valid mobileprovision file"  # Checks file type.
      - name: Extract provisioning profile details
        run: |
          security cms -D -i /tmp/app.mobileprovision > /tmp/decoded.plist  # Decodes the profile to plist.
          PROFILE_UUID=$(/usr/libexec/PlistBuddy -c "Print :UUID" /tmp/decoded.plist)  # Extracts UUID.
          PROFILE_SPECIFIER=$(/usr/libexec/PlistBuddy -c "Print :Name" /tmp/decoded.plist)  # Extracts name.
          echo "PROFILE_UUID=$PROFILE_UUID" >> $GITHUB_ENV  # Sets env var.
          echo "PROFILE_SPECIFIER=$PROFILE_SPECIFIER" >> $GITHUB_ENV  # Sets env var.
          echo "Extracted PROFILE_UUID: $PROFILE_UUID"  # Logs.
          echo "Extracted PROFILE_SPECIFIER: $PROFILE_SPECIFIER"  # Logs.
      - name: Install provisioning profile
        run: |
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles  # Creates directory if needed.
          cp /tmp/app.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/${{ env.PROFILE_UUID }}.mobileprovision  # Installs the profile.
      - name: Extract bundle ID
        run: |
          BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print :CFBundleIdentifier" ios/Runner/Info.plist)  # Extracts app bundle ID from Info.plist.
          echo "BUNDLE_ID=$BUNDLE_ID" >> $GITHUB_ENV  # Sets env var.
          echo "Extracted BUNDLE_ID: $BUNDLE_ID"  # Logs.
      - name: Set hardcoded Team ID
        run: |
          echo "TEAM_ID=D296S46TFC" >> $GITHUB_ENV  # Sets team ID (from your Apple Developer account).
          echo "Hardcoded TEAM_ID: $TEAM_ID"  # Logs.
      - name: Configure Release and Signing
        run: |
          ruby -e "require 'xcodeproj'; project = Xcodeproj::Project.open('ios/Runner.xcodeproj');
          profile = project.build_configuration_list['Profile'];
          release = project.build_configuration_list['Release'];
          if release.nil?
            release = project.add_build_configuration('Release', profile&.type || :release);
            release.build_settings = profile&.build_settings&.dup || {};
          end
          release.build_settings['CODE_SIGN_STYLE'] = 'Manual';
          release.build_settings['DEVELOPMENT_TEAM'] = '${{ env.TEAM_ID }}';
          release.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = '${{ env.PROFILE_SPECIFIER }}';
          release.build_settings['CODE_SIGN_IDENTITY'] = '${{ env.IDENTITY }}';  # Use dynamic identity
          release.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = '${{ env.IDENTITY }}';
          project.targets.each do |target|
            target_release = target.build_configuration_list['Release'];
            target_profile = target.build_configuration_list['Profile'];
            if target_release.nil?
              target_release = target.add_build_configuration('Release', target_profile&.type || :release);
              target_release.build_settings = target_profile&.build_settings&.dup || {};
            end
            target_release.build_settings['CODE_SIGN_STYLE'] = 'Manual';
            target_release.build_settings['DEVELOPMENT_TEAM'] = '${{ env.TEAM_ID }}';
            target_release.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = '${{ env.PROFILE_SPECIFIER }}';
            target_release.build_settings['CODE_SIGN_IDENTITY'] = '${{ env.IDENTITY }}';
            target_release.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = '${{ env.IDENTITY }}';
          end; project.save"
      - name: Set up keychain
        run: |
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH  # Creates a new keychain.
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH  # Sets timeout to 6 hours.
          security default-keychain -s $KEYCHAIN_PATH  # Sets this as the default keychain.
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH  # Unlocks the keychain.
          security list-keychains -d user -s $KEYCHAIN_PATH  # Lists and sets the keychain for user domain.
      - name: Import certificate
        run: security import /tmp/apple_cert.p12 -P "$P12_PASSWORD" -A -t priv -f pkcs12 -k $KEYCHAIN_PATH -T /usr/bin/codesign -T /usr/bin/productsign -T /usr/bin/xcodebuild -T /usr/bin/productbuild # Imports the certificate and private key into the keychain, with -T flags for multiple binaries to ensure access in CI.

      - name: Verify signing identities
        run: |
          security find-identity -v -p codesigning $KEYCHAIN_PATH # Lists valid code signing identities.
          # Dynamically extract the full identity name (CN) of the first valid distribution cert; adjust grep if needed for specificity.
          IDENTITY=$(security find-identity -v -p codesigning $KEYCHAIN_PATH | grep -oEi "Apple Distribution|iPhone Distribution|iOS Distribution|Apple Development"': [^"]+' | head -n 1)
          if [ -z "$IDENTITY" ]; then
            echo "No valid signing identity found!" && exit 1
          fi
          echo "IDENTITY=$IDENTITY" >> $GITHUB_ENV
          echo "Extracted IDENTITY: $IDENTITY"
          # Optional: Keep the original find-certificate for logging, but don't fail on it since we're using dynamic now.
          security find-certificate -c "$CERT_LABEL" -p $KEYCHAIN_PATH || echo "Original CERT_LABEL not found; using dynamic IDENTITY instead."
      - name: Verify signing identities
        run: |
          security find-identity -v -p codesigning $KEYCHAIN_PATH  # Lists valid code signing identities.
          security find-certificate -c "$CERT_LABEL" -p $KEYCHAIN_PATH  # Finds the certificate by its full common name and prints it.
      - name: Create export options plist
        run: |
          echo '<?xml version="1.0" encoding="UTF-8"?>' > exportOptions.plist
          echo '<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">' >> exportOptions.plist
          echo '<plist version="1.0">' >> exportOptions.plist
          echo '<dict>' >> exportOptions.plist
          echo ' <key>compileBitcode</key>' >> exportOptions.plist
          echo ' <false/>' >> exportOptions.plist  # Disables bitcode (common for Flutter).
          echo ' <key>method</key>' >> exportOptions.plist
          echo ' <string>app-store</string>' >> exportOptions.plist  # Export method for App Store.
          echo ' <key>teamID</key>' >> exportOptions.plist
          echo " <string>${{ env.TEAM_ID }}</string>" >> exportOptions.plist  # Team ID.
          echo ' <key>provisioningProfiles</key>' >> exportOptions.plist
          echo ' <dict>' >> exportOptions.plist
          echo " <key>${{ env.BUNDLE_ID }}</key>" >> exportOptions.plist
          echo " <string>${{ env.PROFILE_SPECIFIER }}</string>" >> exportOptions.plist  # Maps bundle ID to profile.
          echo ' </dict>' >> exportOptions.plist
          echo '</dict>' >> exportOptions.plist
          echo '</plist>' >> exportOptions.plist
          cat exportOptions.plist  # Logs the plist for verification.
      - name: Remove FinderInfo xattr
        run: sudo xattr -r -d com.apple.FinderInfo . || true  # Removes macOS-specific attributes that can cause issues.

      - name: Debug Keychain Before Build
        run: |
          security default-keychain
          security list-keychains
          security find-identity -v -p codesigning  # Verifies the keychain is default and identity is available before build.
      - name: Build App
        run: flutter build ios --release --no-codesign -v  # Builds the app for release without codesigning, to avoid signing-related hangs during build.

      - name: Archive App
        run: xcodebuild archive -workspace ios/Runner.xcworkspace -scheme Runner -configuration Release -destination 'generic/platform=iOS' -archivePath build/ios/archive/Runner.xcarchive VERBOSE_SCRIPT_LOGGING=YES COMPILER_INDEX_STORE_ENABLE=NO CODE_SIGN_STYLE=Manual CODE_SIGN_IDENTITY="${{ env.IDENTITY }}" DEVELOPMENT_TEAM="${{ env.TEAM_ID }}" PROVISIONING_PROFILE_SPECIFIER="${{ env.PROFILE_SPECIFIER }}"
        
      - name: Export IPA
        run: xcodebuild -exportArchive -archivePath build/ios/archive/Runner.xcarchive -exportOptionsPlist exportOptions.plist -exportPath build/ios/ipa  # Exports the archive to IPA using the plist.

      - name: Upload IPA artifact
        uses: actions/upload-artifact@v4  # Uploads the built IPA as an artifact.
        with:
          name: ios-app  # Artifact name.
          path: build/ios/ipa/*.ipa  # Path to IPA.
          retention-days: 5  # Keeps for 5 days.
